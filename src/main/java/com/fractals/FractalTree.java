package com.fractals;

import java.awt.Graphics2D;
import java.awt.geom.Line2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URL;

import javax.imageio.ImageIO;

/**
 * FractalTree --- Represents a 2D Fractal Tree generated by creating two smaller children
 * 				   with a specified angle between them for each existing node every iteration.
 * @author Scott Wolfskill
 * @created     02/12/2019
 * @last_edit   02/12/2019
 */
public class FractalTree
{
	protected int width;			  //width  of fractal image to generate
	protected int height;			  //height of fractal image to generate
	protected int padding_horizontal; //padding (px) for left/right sides of generated image
	protected int padding_vertical;   //padding (px) for top/bottom sides of generated image
	protected int totalIterations;
	protected double angle;		      //angle (radians) created between existing line segment
	protected double scalingFactor;	  //factor to scale line segment length by each iteration
	
	private BufferedImage image;
	private Graphics2D gfx;
	private static double initialSegmentLengthFactor = 0.20; //set initial segmentLength to be 20% of usableHeight's value
	private static double initialAngle_deg = 90; //initial angle (degrees) of the 1st line segment
	
	/**
	 * Creates a non-generated FractalTree with specified parameters.
	 * @param width Width of the image to generate.
	 * @param height Height of the image to generate.
	 * @param iterations Number of fractal iterations to perform.
	 * @param angle Angle in radians between child nodes in the fractal.
	 * @param scalingFactor Scaling factor for each child node in the fractal.
	 * @param padding_horizontal Horizontal padding in the image to generate.
	 * @param padding_vertical Vertical padding in the image to generate.
	 */
	public FractalTree(int width, int height, int iterations, double angle, 
					   double scalingFactor, int padding_horizontal, int padding_vertical)
	{
		this.width = width;
		this.height = height;
		this.totalIterations = iterations;
		this.angle = angle;
		this.scalingFactor = scalingFactor;
		this.padding_horizontal = padding_horizontal;
		this.padding_vertical = padding_vertical;
		image = null;
		gfx = null;
	}
	
	/**
	 * Output this generated FractalTree to a location on disk as an image.
	 * @param relativePath Directory relative to this classpath to create the file.
	 * @param filename Name of the file to create in directory relativePath.
	 * @param imageType Type of image to create (e.g. "png")
	 * @return Absolute path of the image file created on disk.
	 * @throws Exception If I/O error occurred.
	 */
	public String outputToFile(String relativePath, String filename, String imageType) throws Exception
	{
		final String msgPrefix = "FractalTree.outputToFile: ";
		ClassLoader classLoader = getClass().getClassLoader();
		URL classpath = classLoader.getResource(".");
		File outputDirectory = new File(classpath.getPath() + relativePath);
		
		//1. Create output directory if doesn't exist already
		if(!outputDirectory.exists()) {
			System.out.println(msgPrefix + "attempting to create non-existant directory '" + outputDirectory.getAbsolutePath() + "'");
			if(outputDirectory.mkdirs()) {
				System.out.println(msgPrefix + "created new directory successfully.");
			} else {
				throw new Exception(msgPrefix + "could not make directory at '" + outputDirectory.getAbsolutePath() + "'.");
			}
		}
		
		//2. Create output file if doesn't exist already
		File outputfile = new File(classpath.getPath() + relativePath + filename);
		String fullpath = outputfile.getAbsolutePath();
		if(!outputfile.exists()) {
			System.out.println(msgPrefix + "attempt to create new file at path '" + outputfile.getAbsolutePath() + "'");
			outputfile.createNewFile();
			System.out.println(msgPrefix + "created new file successfully.");
		} else {
			System.out.println(msgPrefix + "overwriting existing file at '" + outputfile.getAbsolutePath() + "'");
		}
		
		//3. Write image to file
		ImageIO.write(image, imageType, outputfile);
		return fullpath;
	}
	
	/**
	 * Generates the fractal on image by running for totalIterations iterations.
	 */
	public void generate()
	{
		//Set segmentLength to be a percent factor of the total usable height
		//(taking into account padding on both top and bottom)
		int usableHeight = height - 2 * padding_vertical;
		double segmentLength = initialSegmentLengthFactor * usableHeight;
		
		double startX = width / 2;
		double startY = height - padding_vertical;
		double endX = startX;
		double endY = startY - segmentLength;
		double startAngle = Math.toRadians(initialAngle_deg);
		image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
		gfx = image.createGraphics();
		iterate(startX, startY, endX, endY, startAngle, segmentLength, totalIterations); //begin iterating (iterationsRemaining) times
	}
	
	private void iterate(double startX, double startY, double endX, double endY, double currAngle, double segmentLength, int iterationsRemaining)
	{
		
		if(iterationsRemaining == 0) {
			return;
		}
		if(segmentLength <= 0) {
			System.out.println("FractalTree.iterate: segmentLength (" + segmentLength + ") became too small! ");
			return;
		}
		//1. Draw single parent line segment
		drawLine(startX, startY, endX, endY);
		
		//2. Calculate endpoints of left and right child nodes
		double childSegmentLength = scalingFactor * segmentLength;
		double lchild_angle = currAngle + angle / 2;
		double lchild_endX = endX + childSegmentLength * Math.cos(lchild_angle);
		double lchild_endY = endY - childSegmentLength * Math.sin(lchild_angle);
		
		double rchild_angle = currAngle - angle / 2;
		double rchild_endX = endX + childSegmentLength * Math.cos(rchild_angle);
		double rchild_endY = endY - childSegmentLength * Math.sin(rchild_angle);
		
		//3. Call iterate on each child recursively
		iterate(endX, endY, lchild_endX, lchild_endY, lchild_angle, childSegmentLength, iterationsRemaining - 1); //left child
		iterate(endX, endY, rchild_endX, rchild_endY, rchild_angle, childSegmentLength, iterationsRemaining - 1); //right child
	}
	
	private void drawLine(double startX, double startY, double endX, double endY) {
		Line2D line = new Line2D.Double(startX, startY, endX, endY);
		gfx.draw(line);
	}
	
	
}
